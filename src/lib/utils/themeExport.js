import JSZip from 'jszip';

/**
 * Export current theme to a downloadable ZIP file
 * @param {Object} theme - Current theme object
 * @param {string} themeName - Name for the theme
 */
export async function exportTheme(theme, themeName) {
	const zip = new JSZip();
	const sanitizedName = themeName.toLowerCase().replace(/[^a-z0-9-]/g, '-');
	const themeFolder = `omarchy-${sanitizedName}-theme`;

	// Generate theme files
	const files = generateThemeFiles(theme, themeName);

	// Add all files to the ZIP
	Object.entries(files).forEach(([filename, content]) => {
		zip.file(`${themeFolder}/${filename}`, content);
	});

	// Generate ZIP and download
	const zipBlob = await zip.generateAsync({ type: 'blob' });
	downloadBlob(zipBlob, `${themeFolder}.zip`);
}

/**
 * Generate all theme configuration files
 * @param {Object} theme - Theme configuration
 * @param {string} themeName - Theme name
 * @returns {Object} - Object with filename: content pairs
 */
function generateThemeFiles(theme, themeName) {
	const files = {};

	// Main theme configuration
	files['theme.conf'] = generateMainConfig(theme, themeName);

	// Hyprland configuration
	files['hyprland.conf'] = generateHyprlandConfig(theme);

	// Waybar CSS
	files['waybar.css'] = generateWaybarCSS(theme);

	// Alacritty terminal configuration
	files['alacritty.toml'] = generateAlacrittyConfig(theme);

	// Mako notification daemon configuration
	files['mako.ini'] = generateMakoConfig(theme);

	// Neovim theme (Lua)
	files['neovim.lua'] = generateNeovimConfig(theme);

	// Walker launcher CSS
	files['walker.css'] = generateWalkerCSS(theme);

	// SwayOSD CSS
	files['swayosd.css'] = generateSwayOSDCSS(theme);

	// btop system monitor theme
	files['btop.theme'] = generateBtopTheme(theme);

	// Icon theme file
	files['icons.theme'] = theme.iconTheme;

	// Light mode indicator (if applicable)
	if (theme.isLightMode) {
		files['light.mode'] = generateLightModeFile(theme);
	}

	// Chromium theme reference
	files['chromium.theme'] = 'rose-pine';

	// README
	files['README.md'] = generateReadme(theme, themeName);

	// Hyprlock configuration
	files['hyprlock.conf'] = generateHyprlockConfig(theme);

	return files;
}

function generateMainConfig(theme, themeName) {
	const timestamp = new Date().toISOString().split('T')[0];

	return `# Omarchy Theme Configuration
# Generated by Omarchy Theme Builder
# Theme: ${themeName}
# Created: ${timestamp}

[metadata]
name = "${themeName}"
version = "1.0.0"
author = "Omarchy Theme Builder"
description = "Custom theme created with Omarchy Theme Builder"

[colors]
background = "${theme.colors.background}"
foreground = "${theme.colors.foreground}"
surface = "${theme.colors.surface}"
overlay = "${theme.colors.overlay}"
muted = "${theme.colors.muted}"
subtle = "${theme.colors.subtle}"
text = "${theme.colors.text}"
love = "${theme.colors.love}"
gold = "${theme.colors.gold}"
rose = "${theme.colors.rose}"
pine = "${theme.colors.pine}"
foam = "${theme.colors.foam}"
iris = "${theme.colors.iris}"
highlight_low = "${theme.colors.highlightLow}"
highlight_med = "${theme.colors.highlightMed}"
highlight_high = "${theme.colors.highlightHigh}"

[appearance]
icon_theme = "${theme.iconTheme}"
light_mode = ${theme.isLightMode}
wallpaper_mode = "stretch"

[window]
border_radius = 8
border_width = 2
opacity = 0.95
shadow_enabled = true

# Auto-generated on: ${new Date().toLocaleString()}
`;
}

function generateHyprlandConfig(theme) {
	return `# Hyprland theme configuration
# Generated by Omarchy Theme Builder

general {
    col.active_border = rgba(${theme.colors.iris.slice(1)}ff)
    col.inactive_border = rgba(${theme.colors.overlay.slice(1)}aa)
}

decoration {
    col.shadow = rgba(00000088)
    col.shadow_inactive = rgba(00000044)
}
`;
}

function generateWaybarCSS(theme) {
	return `/* Waybar theme configuration */
/* Generated by Omarchy Theme Builder */

* {
    background: ${theme.colors.surface};
    color: ${theme.colors.foreground};
}

window#waybar {
    background-color: ${theme.colors.surface};
    border-bottom: 1px solid ${theme.colors.overlay};
}

.modules-left,
.modules-center,
.modules-right {
    background: transparent;
}

#workspaces button {
    background: ${theme.colors.overlay};
    color: ${theme.colors.muted};
    border: 1px solid ${theme.colors.overlay};
    border-radius: 4px;
}

#workspaces button.focused,
#workspaces button.active {
    background: ${theme.colors.iris};
    color: ${theme.colors.background};
}

#clock,
#battery,
#network,
#pulseaudio {
    background: ${theme.colors.overlay};
    color: ${theme.colors.foreground};
    padding: 0 10px;
    border-radius: 4px;
    margin: 2px;
}

#battery.critical {
    color: ${theme.colors.love};
}

#battery.warning {
    color: ${theme.colors.gold};
}
`;
}

function generateAlacrittyConfig(theme) {
	return `# Alacritty terminal theme
# Generated by Omarchy Theme Builder

[colors.primary]
background = "${theme.colors.background}"
foreground = "${theme.colors.foreground}"

[colors.cursor]
text = "${theme.colors.background}"
cursor = "${theme.colors.iris}"

[colors.selection]
text = "CellForeground"
background = "${theme.colors.overlay}"

[colors.normal]
black = "${theme.colors.overlay}"
red = "${theme.colors.love}"
green = "${theme.colors.foam}"
yellow = "${theme.colors.gold}"
blue = "${theme.colors.pine}"
magenta = "${theme.colors.iris}"
cyan = "${theme.colors.foam}"
white = "${theme.colors.foreground}"

[colors.bright]
black = "${theme.colors.muted}"
red = "${theme.colors.love}"
green = "${theme.colors.foam}"
yellow = "${theme.colors.gold}"
blue = "${theme.colors.pine}"
magenta = "${theme.colors.iris}"
cyan = "${theme.colors.foam}"
white = "${theme.colors.text}"

[colors.dim]
black = "${theme.colors.surface}"
red = "${theme.colors.love}"
green = "${theme.colors.foam}"
yellow = "${theme.colors.gold}"
blue = "${theme.colors.pine}"
magenta = "${theme.colors.iris}"
cyan = "${theme.colors.foam}"
white = "${theme.colors.muted}"
`;
}

function generateMakoConfig(theme) {
	return `# Mako notification daemon configuration
# Generated by Omarchy Theme Builder

background-color=${theme.colors.surface}
text-color=${theme.colors.foreground}
border-color=${theme.colors.overlay}
border-radius=8
border-size=2
font=Inter 10
padding=12
default-timeout=5000
ignore-timeout=1

[urgency=critical]
background-color=${theme.colors.love}
text-color=${theme.colors.background}
border-color=${theme.colors.love}
`;
}

function generateNeovimConfig(theme) {
	return `-- Neovim theme configuration
-- Generated by Omarchy Theme Builder

return {
  name = "omarchy-custom",
  colors = {
    bg = "${theme.colors.background}",
    fg = "${theme.colors.foreground}",
    surface = "${theme.colors.surface}",
    overlay = "${theme.colors.overlay}",
    muted = "${theme.colors.muted}",
    subtle = "${theme.colors.subtle}",
    text = "${theme.colors.text}",
    love = "${theme.colors.love}",
    gold = "${theme.colors.gold}",
    rose = "${theme.colors.rose}",
    pine = "${theme.colors.pine}",
    foam = "${theme.colors.foam}",
    iris = "${theme.colors.iris}",
    highlight_low = "${theme.colors.highlightLow}",
    highlight_med = "${theme.colors.highlightMed}",
    highlight_high = "${theme.colors.highlightHigh}",
  }
}
`;
}

function generateWalkerCSS(theme) {
	return `/* Walker application launcher theme */
/* Generated by Omarchy Theme Builder */

window {
    background: ${theme.colors.surface};
    color: ${theme.colors.foreground};
    border: 1px solid ${theme.colors.overlay};
    border-radius: 8px;
}

#entry {
    background: ${theme.colors.background};
    color: ${theme.colors.foreground};
    border: 1px solid ${theme.colors.overlay};
    border-radius: 4px;
    padding: 8px;
}

#list {
    background: transparent;
}

#list row {
    background: transparent;
    color: ${theme.colors.foreground};
    border-radius: 4px;
    padding: 4px 8px;
}

#list row:hover,
#list row:selected {
    background: ${theme.colors.overlay};
}
`;
}

function generateSwayOSDCSS(theme) {
	return `/* SwayOSD theme configuration */
/* Generated by Omarchy Theme Builder */

window {
    background: ${theme.colors.surface};
    color: ${theme.colors.foreground};
    border: 1px solid ${theme.colors.overlay};
    border-radius: 8px;
}

progressbar trough {
    background: ${theme.colors.overlay};
}

progressbar progress {
    background: ${theme.colors.iris};
}
`;
}

function generateBtopTheme(theme) {
	return `# btop system monitor theme
# Generated by Omarchy Theme Builder

theme[main_bg]="${theme.colors.background}"
theme[main_fg]="${theme.colors.foreground}"
theme[title]="${theme.colors.iris}"
theme[hi_fg]="${theme.colors.text}"
theme[selected_bg]="${theme.colors.overlay}"
theme[selected_fg]="${theme.colors.foreground}"
theme[inactive_fg]="${theme.colors.muted}"
theme[graph_text]="${theme.colors.subtle}"
theme[meter_bg]="${theme.colors.overlay}"
theme[proc_misc]="${theme.colors.foam}"
theme[cpu_box]="${theme.colors.iris}"
theme[mem_box]="${theme.colors.gold}"
theme[net_box]="${theme.colors.pine}"
theme[proc_box]="${theme.colors.love}"
theme[div_line]="${theme.colors.overlay}"
theme[temp_start]="${theme.colors.foam}"
theme[temp_mid]="${theme.colors.gold}"
theme[temp_end]="${theme.colors.love}"
theme[cpu_start]="${theme.colors.foam}"
theme[cpu_mid]="${theme.colors.gold}"
theme[cpu_end]="${theme.colors.love}"
theme[free_start]="${theme.colors.foam}"
theme[free_mid]="${theme.colors.gold}"
theme[free_end]="${theme.colors.love}"
theme[cached_start]="${theme.colors.pine}"
theme[cached_mid]="${theme.colors.iris}"
theme[cached_end]="${theme.colors.love}"
theme[available_start]="${theme.colors.foam}"
theme[available_mid]="${theme.colors.gold}"
theme[available_end]="${theme.colors.love}"
theme[used_start]="${theme.colors.foam}"
theme[used_mid]="${theme.colors.gold}"
theme[used_end]="${theme.colors.love}"
theme[download_start]="${theme.colors.pine}"
theme[download_mid]="${theme.colors.foam}"
theme[download_end]="${theme.colors.iris}"
theme[upload_start]="${theme.colors.love}"
theme[upload_mid]="${theme.colors.gold}"
theme[upload_end]="${theme.colors.rose}"
`;
}

function generateLightModeFile(theme) {
	return `# Light mode configuration
# Generated by Omarchy Theme Builder

LIGHT_MODE_ENABLED=true
DARK_MODE_FALLBACK=false
`;
}

function generateHyprlockConfig(theme) {
	return `# Hyprlock screen locker configuration
# Generated by Omarchy Theme Builder

general {
    disable_loading_bar = false
    grace = 2
}

background {
    color = ${theme.colors.background}
    blur_passes = 3
    blur_size = 8
}

input-field {
    size = 200, 50
    position = 0, 0
    monitor =
    dots_center = true
    fade_on_empty = false
    placeholder_text = <i>Password...</i>
    hide_input = false
    outer_color = ${theme.colors.overlay}
    inner_color = ${theme.colors.surface}
    font_color = ${theme.colors.foreground}
    fail_color = ${theme.colors.love}
    check_color = ${theme.colors.foam}
}

label {
    text = Hi there, $USER
    color = ${theme.colors.foreground}
    font_size = 25
    font_family = Inter
    position = 0, 80
    halign = center
    valign = center
}
`;
}

function generateReadme(theme, themeName) {
	const timestamp = new Date().toLocaleString();

	return `# ${themeName}

A custom Omarchy theme created with the Omarchy Theme Builder.

## Installation

1. Extract this theme folder to your Omarchy themes directory:
   \`\`\`bash
   ~/.config/omarchy/themes/
   \`\`\`

2. Apply the theme using the Omarchy theme manager:
   \`\`\`bash
   omarchy-theme apply ${themeName.toLowerCase().replace(/[^a-z0-9-]/g, '-')}
   \`\`\`

## Theme Details

- **Name:** ${themeName}
- **Icon Theme:** ${theme.iconTheme}
- **Mode:** ${theme.isLightMode ? 'Light' : 'Dark'}
- **Created:** ${timestamp}
- **Generator:** Omarchy Theme Builder

## Color Palette

- **Background:** ${theme.colors.background}
- **Foreground:** ${theme.colors.foreground}
- **Surface:** ${theme.colors.surface}
- **Accent:** ${theme.colors.iris}
- **Love:** ${theme.colors.love}
- **Gold:** ${theme.colors.gold}
- **Foam:** ${theme.colors.foam}
- **Pine:** ${theme.colors.pine}
- **Rose:** ${theme.colors.rose}

## Included Configurations

- Hyprland window manager
- Waybar status bar
- Alacritty terminal
- Mako notifications
- Neovim editor
- Walker launcher
- SwayOSD
- btop system monitor
- Hyprlock screen locker

## Support

For issues or questions about this theme, visit the [Omarchy Theme Builder](https://github.com/your-username/omarchy-theme-builder) repository.

---

*This theme was generated automatically by the Omarchy Theme Builder.*
`;
}

/**
 * Download a blob as a file
 * @param {Blob} blob - The blob to download
 * @param {string} filename - The filename to save as
 */
function downloadBlob(blob, filename) {
	const url = URL.createObjectURL(blob);
	const a = document.createElement('a');
	a.href = url;
	a.download = filename;
	a.style.display = 'none';
	document.body.appendChild(a);
	a.click();
	document.body.removeChild(a);
	URL.revokeObjectURL(url);
}

/**
 * Validate theme data before export
 * @param {Object} theme - Theme object to validate
 * @returns {boolean} - Whether the theme is valid
 */
export function validateTheme(theme) {
	if (!theme || !theme.colors) {
		return false;
	}

	const requiredColors = [
		'background', 'foreground', 'surface', 'overlay', 'muted',
		'subtle', 'text', 'love', 'gold', 'rose', 'pine', 'foam', 'iris'
	];

	for (const color of requiredColors) {
		if (!theme.colors[color] || !isValidHexColor(theme.colors[color])) {
			return false;
		}
	}

	return true;
}

/**
 * Check if a string is a valid hex color
 * @param {string} hex - Hex color string to validate
 * @returns {boolean} - Whether the hex color is valid
 */
function isValidHexColor(hex) {
	return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex);
}
